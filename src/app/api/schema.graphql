type Customisation {
  id: ID!
  name: String!
  allergen: Boolean!
}

input CustomisationInput {
  name: String!
  allergen: Boolean!
}

input UpdateCustomisationInput {
  id: ID!
  name: String!
  allergen: Boolean!
}

input DeleteCustomisationInput {
  id: ID!
}

type Recipe {
  id: ID!
  name: String!
  hotOrCold: String!
  shortName: String!
  description: String
  possibleCustomisations: [Customisation!]!
}

input UpdateRecipeInput {
  id: ID!
  hotOrCold: String!
  shortName: String!
  name: String!
  description: String
  customisationIds: [ID!]!
}

input DeleteRecipeInput {
  id: ID!
}

input RecipeInput {
  name: String!
  hotOrCold: String!
  shortName: String!
  description: String
  customisationIds: [ID!]!
}

type Customer {
  username: String!
  firstName: String!
  surname: String!
  salutation: String!
  address: String!
  telephone: String!
  startDate: Int
  paymentDayOfMonth: Int
  notes: String
  email: String!
  pauseStart: Int
  pauseEnd: Int
  daysPerWeek: Int!
  plan: Plan!
  legacyPrice: Int
  snack: String!
  breakfast: Boolean!
  requiredCustomisations: [Customisation!]!
}

input CustomerInput {
  username: String!
  firstName: String!
  surname: String!
  salutation: String!
  address: String!
  telephone: String!
  startDate: Int
  paymentDayOfMonth: Int
  notes: String
  email: String!
  pauseStart: Int
  pauseEnd: Int
  daysPerWeek: Int!
  plan: PlanInput!
  legacyPrice: Int
  snack: String!
  breakfast: Boolean!
  requiredCustomisationIds: [String!]!
}

input UpdateCustomerInput {
  firstName: String!
  surname: String!
  salutation: String!
  address: String!
  telephone: String!
  startDate: Int
  paymentDayOfMonth: Int
  notes: String
  email: String!
  pauseStart: Int
  pauseEnd: Int
  daysPerWeek: Int!
  plan: PlanInput!
  legacyPrice: Int
  snack: String!
  breakfast: Boolean!
  requiredCustomisationIds: [String!]!
}

input DeleteCustomerInput {
  id: ID!
}

type Query {
  getCustomisationsById(id: String!): Customisation
  listCustomisations: [Customisation] 
  getRecipeById(recipeId: String!): Recipe
  listRecipes: [Recipe]
  getCustomerById(customerId: String!): Customer
  listCustomers: [Customer]
}

type Mutation {
  updateRecipe(input: UpdateRecipeInput): Recipe
  deleteRecipe(input: DeleteRecipeInput): String
  createRecipe(input: RecipeInput): Recipe
  updateCustomer(input: UpdateCustomerInput): Customer
  createCustomer(input: CustomerInput): Customer
  deleteCustomer(input: DeleteCustomerInput): String
  updateCustomisation(input: UpdateCustomisationInput): Customisation
  createCustomisation(input: CustomisationInput): Customisation
  deleteCustomisation(input: DeleteCustomisationInput): String
}

type Plan {
  name: String!
  mealsPerDay: Int!
  costPerMeal: Int!
  category: String!
}

input PlanInput {
  name: String!
  mealsPerDay: Int!
  costPerMeal: Int!
  category: String!
}
